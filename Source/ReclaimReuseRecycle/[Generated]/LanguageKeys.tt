<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.XML" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	// ---------------- DO NOT EDIT ABOVE THIS LINE ---------------------

	SetNamespace("DoctorVanGogh.ReclaimReuseRecycle");

	// add defined language key files (master language only)
	ParseXML(@"..\..\..\Languages\English\Keyed\r3.xml");


	// ---------------- DO NOT EDIT BELOW THIS LINE ---------------------
#>// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Diagnostics.CodeAnalysis;

<#
				bool _usenamespace= !String.IsNullOrEmpty(_namespace);
				if (_usenamespace) {
#>
namespace <#= _namespace #> {
<#				}
#>
    [GeneratedCode("DefGenerator.tt","0.1")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
	public static partial class LanguageKeys {
<#				foreach (var kvp in _paths) {
#>
		public static class <#= kvp.Value #> {
<#
					using (FileStream fs = new FileStream(Host.ResolvePath(kvp.Key), FileMode.Open, FileAccess.Read, FileShare.ReadWrite)) {
						XmlDocument doc = new XmlDocument();
						doc.Load(fs);

						foreach (XmlNode element in doc.SelectNodes(@"/*/*")) {
#>
			/// <summary>
			/// Get's the translation key for '<em><#= System.Security.SecurityElement.Escape(element.InnerText ?? String.Empty).Replace("\r\n", "<br />")  #></em>'
			/// </summary>
			public const string <#= SanitizeIdentifier(element.Name) #> = "<#= element.Name #>";
<#

						}
					}

#>
		}
<#
				}			
#>
	}
<#
				if (_usenamespace) {
#>}
<#				}
#>
<#+
				#region Utility stuff
				private string _namespace=null;
				
				IDictionary<string, string> _paths = new Dictionary<string, string>();

				void SetNamespace(string ns) {
					_namespace= ns;
				}

				void ParseXML(string path) {
					ParseXML(path, null);					
				}

				void ParseXML(string path, string prefix) {
					if (String.IsNullOrEmpty(prefix)) {
						prefix = System.IO.Path.GetFileNameWithoutExtension(path);
					}						

					_paths.Add(path, SanitizeIdentifier(prefix));
				}


				static Regex rStart = new Regex(@"^[^\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_]", RegexOptions.Compiled);
				static Regex rOther = new Regex(@"(?<!^)[^\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Cf}_]", RegexOptions.Compiled);

				static string SanitizeIdentifier(string value) {
					// https://msdn.microsoft.com/en-us/library/aa664670(VS.71).aspx
					value = rStart.Replace(value, "_");
					value = rOther.Replace(value, "_");
					return "@" + value;					
				}

				#endregion
#>