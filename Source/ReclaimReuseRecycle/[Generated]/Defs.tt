<#@ template debug="false" hostspecific="true" language="C#"  #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(RimworldManagedDir)\UnityEngine.dll" #>
<#@ assembly name="$(RimworldManagedDir)\Assembly-CSharp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Verse" #>
<#@ import namespace="RimWorld" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #><#

	SetNamespace("DoctorVanGogh.ReclaimReuseRecycle");

	AddDef<ThingCategoryDef>("BodyParts");	
	AddDef<ThingCategoryDef>("BodyPartsNatural");		
	AddDef<ThingCategoryDef>("BodyPartsReclaimed");
	AddDef<ThingCategoryDef>("BodyPartsNonSterile");

	AddDef<ThingCategoryDef>("BodyPartsNonSterile_Primitive");
	AddDef<ThingCategoryDef>("BodyPartsNonSterile_Advanced");
	AddDef<ThingCategoryDef>("BodyPartsNonSterile_Glittertech");

	AddDef<ThingCategoryDef>("BodyPartsMangled");

	AddDef<ThingCategoryDef>("BodyPartsMangled_Primitive");
	AddDef<ThingCategoryDef>("BodyPartsMangled_Advanced");
	AddDef<ThingCategoryDef>("BodyPartsMangled_Glittertech");

	AddDef<RecipeDef>("ButcherCorpseFlesh");
	AddDef<RecipeDef>("ButcherCorpseMechanoid");

	AddDef<RecipeDef>("R3_HarvestCorpseFlesh");
	AddDef<RecipeDef>("R3_HarvestCorpseMechanoid");	

	AddDef<RecipeDef>("R3_Sterilize_Primitive");	
	AddDef<RecipeDef>("R3_Sterilize_Advanced");	
	AddDef<RecipeDef>("R3_Sterilize_Glittertech");	

	AddDef<RecipeDef>("R3_Refurbish_Primitive");	
	AddDef<RecipeDef>("R3_Refurbish_Advanced");	
	AddDef<RecipeDef>("R3_Refurbish_Glittertech");	
	
	AddDef<SpecialThingFilterDef>("R3_AllowUnHarvested");

	AddDef<StatDef>("MarketValue");
	AddDef<StatDef>("Mass");
	AddDef<StatDef>("MaxHitPoints");
	AddDef<StatDef>("Flammability");
	AddDef<StatDef>("DeteriorationRate");
	AddDef<StatDef>("Beauty");

	AddDef<StatCategoryDef>("Basics");
	AddDef<StatCategoryDef>("ReclaimedItem");


#>// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.Diagnostics.CodeAnalysis;

<#
	bool _usenamespace= !String.IsNullOrEmpty(_namespace);
	if (_usenamespace) {
#>namespace <#= _namespace #> {
<#	}
#>
	[GeneratedCode("Defs.Generated.tt","0.1")]
	[SuppressMessage("ReSharper", "InconsistentNaming")]
	[SuppressMessage("ReSharper", "UnusedMember.Global")]
	[SuppressMessage("ReSharper", "ConvertToAutoProperty")]
	[SuppressMessage("ReSharper", "FieldCanBeMadeReadOnly.Local")]
	[SuppressMessage("ReSharper", "ConvertPropertyToExpressionBody")]
	public partial class DefNames {
<#
	foreach	(var entry in _names.OrderBy(kvp=> kvp.Key)) {
#>		public const string @<#= entry.Key #> = @"<#= entry.Value #>";
<#
	}
#>
	}
	[GeneratedCode("Defs.Generated.tt","0.1")]
	[SuppressMessage("ReSharper", "InconsistentNaming")]
	[SuppressMessage("ReSharper", "UnusedMember.Global")]
	[SuppressMessage("ReSharper", "ConvertToAutoProperty")]
	[SuppressMessage("ReSharper", "FieldCanBeMadeReadOnly.Local")]
	[SuppressMessage("ReSharper", "ConvertPropertyToExpressionBody")]
	public partial class DefReferences {
<#
	foreach	(var entry in _references.OrderBy(kvp=> kvp.Key)) {

#>		private static <#= entry.Value.Item1 #> _<#= entry.Value.Item2 #> = Verse.DefDatabase<<#= entry.Value.Item1 #>>.GetNamed(DefNames.<#= entry.Value.Item2 #>);
<#
	}

	foreach	(var entry in _references.OrderBy(kvp=> kvp.Key)) {
#>		public static <#= entry.Value.Item1 #> @<#= entry.Value.Item2 #> { get { return _<#= entry.Value.Item2 #>; } }
<#
	}
#>
	}
<#	if (_usenamespace) {
#>}
<#	}
#><#+

	#region  Utility elements
	private string _namespace=null;
	private IDictionary<string, string> _names = new Dictionary<string, string>();
	private IDictionary<string, Tuple<Type, string>> _references = new Dictionary<string, Tuple<Type, string>>();

	void SetNamespace(string value) {
		_namespace = value;
	}

	void AddDef(string defname) {
		AddDef(defname, null);
	}

	string GetKey(string defname, string type) {
		if (String.IsNullOrEmpty(type)) {
			return SanitizeIdentifier(defname);
		}
		return SanitizeIdentifier(String.Format("{0}_{1}", type, defname));
	}


	void AddDef(string defname, string type) {
		_names.Add(GetKey(defname, type), defname);
	}

	void AddDef<T>(string defname) where T: Verse.Def {
		var g = TrimEnd(typeof(T).Name, "Def");

		AddDef(defname, g); 
		_references.Add(defname, new Tuple<Type, string>(typeof(T), GetKey(defname, g)));
	}	
		  
	static string TrimEnd(string source, string value)	{
		if (!source.EndsWith(value))
			return source;

		return source.Remove(source.LastIndexOf (value));
	}


	/* 
		regular expressions to check for allowed characters in c# identifier names (see https://msdn.microsoft.com/en-us/library/aa664670(VS.71).aspx)

		Note: 
		spec refers to an _older_ Unicode version, .NET itself now uses a higher version - _some_ of those character classes
		have expanded and thus _some_ weird characters might slip through.... Just something to keep in mind if this ever barfs				
	*/

	// (not) allowed at 1st place
	static Regex rStart = new Regex(@"^[^\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_]", RegexOptions.Compiled);
	// (not) allowed anywhere but 1st place
	static Regex rOther = new Regex(@"(?<!^)[^\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Cf}_]", RegexOptions.Compiled);


	static string SanitizeIdentifier(string value) {
		value = rStart.Replace(value, "_");
		value = rOther.Replace(value, "_");
		
		return value;
	}

	#endregion
#>